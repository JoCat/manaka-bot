import {
    CacheType,
    ChatInputCommandInteraction,
    EmbedBuilder,
    SlashCommandBuilder,
} from "discord.js"

import { Command, CommandCategory } from "../Command"

export class HelpCommand extends Command {
    override name = "help"
    override category = CommandCategory.GENERAL
    override description =
        "–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"

    override commandData = new SlashCommandBuilder()
        .setName(this.name)
        .setDescription(this.description)
        .addStringOption((option) =>
            option.setName("command").setDescription("–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"),
        )

    override execute(interaction: ChatInputCommandInteraction<CacheType>) {
        const { color, version, ownerID, creatorID } = this.core.configService

        const commandName = interaction.options.getString("command")
        if (!commandName) {
            const list = (category: CommandCategory, categoryName: string) => {
                const cmdList = this.core.commandsManager
                    .getCommands()
                    .filter((cmd) => cmd.category === category)
                    .map(
                        (cmd) =>
                            `${cmd.isDanger ? "‚ö†Ô∏è" : "üîπ"} \`/${cmd.name}\` ‚Äì ${cmd.description}`,
                    )
                    .join("\n")
                return `**${categoryName}:**\n${cmdList}\n`
            }

            const data = []

            data.push(list(CommandCategory.GENERAL, "–û—Å–Ω–æ–≤–Ω—ã–µ"))

            if (interaction.memberPermissions.has("Administrator")) {
                data.push(list(CommandCategory.ADMIN, "–ê–¥–º–∏–Ω—Å–∫–∏–µ"))
            }

            data.push(
                "–ù–∞–ø–∏—à–∏—Ç–µ `/help` –∏ `[–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã]`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ.",
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/help help`",
                "### –í–Ω–∏–º–∞–Ω–∏–µ! –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥, –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º ‚ö†Ô∏è, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º!",
                `-# **–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞:** <@${creatorID}>`,
                `-# **–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞:** <@${ownerID}>`,
                `-# **–í–µ—Ä—Å–∏—è: ${version}**`,
            )

            const embed = new EmbedBuilder()
                .setColor(color)
                .setDescription(data.join("\n"))
                .setTimestamp()
                .setTitle("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
            return interaction.reply({
                embeds: [embed],
                ephemeral: true,
            })
        }

        const command = this.core.commandsManager.getCommand(commandName)

        if (!command)
            return interaction.reply({
                content: `–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å \`/help\` –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã.`,
                ephemeral: true,
            })

        const embed = new EmbedBuilder()
            .setColor(color)
            .setTimestamp()
            .setTitle("–ö–æ–º–∞–Ω–¥–∞: " + command.name)

        const addField = (name: string, value: string) =>
            embed.addFields({ name, value })

        if (command.description) addField("–û–ø–∏—Å–∞–Ω–∏–µ", command.description)
        if (command.info) addField("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", command.info)
        // addField("–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", `${command.cooldown || 3} —Å–µ–∫—É–Ω–¥`)

        interaction.reply({
            embeds: [embed],
            ephemeral: true,
        })
    }
}
